from ore_algebra import *
R.<x> = PolynomialRing(ZZ); A.<Dx> = OreAlgebra(R)
A             # prints the Ore algebra ZZ[x]<D_x>
A.random_element()
Dx*x          # prints xD_x + 1 since the Lie bracket [D_x, x] = 1
B.<Sx> = OreAlgebra(R) 
B             # prints ZZ[x]<Sx>
Sx*x          # prints(x+1)Sx since S_n n = (n+1)S_n

# now for q-shift and q-derivations 

R.<x> = PolynomialRing(ZZ['q'])  # the base integral ring of one var includes var q.
A.<Qx> = OreAlgebra(R, q = 2)    # evaluate q = 2
Qx * x                           # 2xQx since Q_x x = q x Q_x (this si the q-shift of x)


R.<x> = ZZ['x']
A = OreAlgebra(R, ('X', {x:x+1}, {x:1}))    # implemented user specified commutation rules.
X = A.gen()
X*x                                         # (x+1)X + 1


# base ring: QQ(x,y,z); y = exp(x) and z = log(x)
K = ZZ['x', 'y', 'z'].fraction_field()
x,y,z = K.gens()
A = OreAlgebra(K, ('D', {}, {x:1, y:y, z: 1/x}))
D = A.gen()
D*x, D*y, D*z               # output: (xD + 1, yD+ y, zD + (1/x))
                            # {} is equivalent to {x:x, y:y, z:z} 
A = OreAlgebra(K, ('D', {}, {x:1, y:y, z:1/x}), 'Sx')
D, Sx = A.gens()
D*x, Sx*x                   # (xD + 1, (x+1)Sx)
D*y, Sx*y                   # (yD+y,       ySx)  
D*z, Sx*z                   # (zD + (1/x), zSx) 

ZZ['x'].fraction_field()['y','z']          # Frac(ZZ[x])[y,z]
GF(1091)['x','y','z']['u']                 # F_{1091}[x,y,z][u]
(ZZ['x','y','z'].quotient_ring(x^2+ y^2 + z^2 -1))['u'] ### not OK  # Z[x,y,z]/(x^2 + y^2 + z^2 -1)Z[x,y,z][u]
GF(9,'a')['x'] ### not OK                  # F_{3^2}[x]


R.<x> = ZZ['x']; A.<Dx> = OreAlgebra(R)
A                                              # ZZ[x]<Dx>
A.associated_commutative_algebra()             # ZZ[x][Dx]
A.base_ring()                                  # ZZ[x]
A.gen()                                        # Dx
s = A.sigma(); d = A.delta();     
s(x^5), d(x^5)                                 # (x^5,5x^4)


R.<x> = ZZ['x']; A.<Dx> = OreAlgebra(R)
(5*x^2 + 3*x-7)*Dx^2 + (3*x^2 + 8*x -1)*Dx + (9*x^2-3*x+8)


R.<x> = ZZ['x']; A.<Dx> = OreAlgebra(R)
Ac = A.associated_commutative_algebra()
Ac                                              #ZZ[x][Dx]
A(Ac.random_element())                          #(x+2)Dx^2 + (x^2-x-1)Dx + x^2 +5x-1
A([5*x, 7*x-3, 3*x+1])                          #(3x+1)Dx^2 + (7x-3)Dx + 5x
A("(5*x^2+3*x-7)*Dx^2 + (3*x^2+8*x-1)*Dx + (9*x^2-3*x+8)")

L = (5*x^2+3*x-7)*Dx^2 + (3*x^2+8*x-1)*Dx + (9*x^2-3*x+8)
L.parent()                                      # ZZ[x]<Dx>
B = OreAlgebra(ZZ['x'], 'Dx')
L = B(L)
L.parent()                                      # QQ[x]<Dx>


A = OreAlgebra(ZZ['t']['x'], 'Dx')
B = OreAlgebra(QQ['x'].fraction_field(), 'Dx')
L = A.random_element() + B.random_element()
L.parent()                                      # Frac(QQ[t][x])<Dx>






